{"version":3,"sources":["Components/Thumbnail/Thumbnail.js","Components/FullView/FullView.js","Containers/ThumbnailView/ThumbnailView.js","App.js","reportWebVitals.js","index.js"],"names":["thumbnail","props","className","src","onClick","clicked","alt","fullView","number","axios","url","method","responseType","then","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","ThumbnailView","fetchedImageURLs","IMAGE_NUMBER","push","state","Length","imageURLs","loading","fullImage","imageValue","Previous","currentImage","setState","Next","ArrowKeysReact","config","left","right","this","events","autoFocus","dataLength","next","ll","length","fetchMoreData","hasMore","loader","endMessage","style","textAlign","map","u","Number","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9a39a5b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Thumbnail.css';\r\n\r\nconst thumbnail = (props) => {\r\n    return (\r\n        <div className='Div' >\r\n            \r\n            <img className='Image' src={props.src} onClick={props.clicked} alt={props.alt} />\r\n        </div>\r\n        \r\n    )\r\n    \r\n};\r\n\r\nexport default thumbnail;","import React from \"react\";\r\nimport './FullView.css';\r\nimport axios from 'axios';\r\n\r\nconst fullView = (props) => {\r\n\r\n    const url2000 = '/2000x2000?text=';\r\n\r\n    const download = (number) => {\r\n        axios({\r\n            url:`/3900x3900?text=${number}`,\r\n            method: 'GET',\r\n            responseType:'blob'\r\n        })\r\n        .then((response) => {\r\n            const url = window.URL.createObjectURL(new Blob([response.data]));\r\n\r\n            const link = document.createElement('a');\r\n\r\n            link.href = url;\r\n\r\n            link.setAttribute('download', `image${number}.png`);\r\n\r\n            document.body.appendChild(link);\r\n\r\n            link.click()\r\n        } )\r\n\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className='mainDiv'>\r\n            \r\n            <img className='FullView' src={url2000 + props.src} />\r\n            <button className='Download' onClick={() =>download(props.src)} >Download Full Size image</button>\r\n        \r\n        </div>\r\n    )\r\n};\r\n    \r\n\r\nexport default fullView;","import React, { Component } from \"react\";\r\nimport './ThumbnailView.css';\r\n// import axios from 'axios';\r\nimport Thumbnail from '../../Components/Thumbnail/Thumbnail';\r\n// import { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport FullView from '../../Components/FullView/FullView';\r\nimport ArrowKeysReact from 'arrow-keys-react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nclass ThumbnailView extends Component {\r\n\r\n    // state = {\r\n    //     Length: 20,\r\n    //     imageURLs: [],\r\n    //     loading: true,\r\n    //     fullImage: false,\r\n    //     imageValue: null\r\n    // }\r\n\r\n     constructor (props) {\r\n        super (props)\r\n        const fetchedImageURLs = [];\r\n\r\n        for (let IMAGE_NUMBER = 1; IMAGE_NUMBER <= (20) && IMAGE_NUMBER<=300; ++IMAGE_NUMBER) {\r\n\r\n        fetchedImageURLs.push(`${IMAGE_NUMBER}`)\r\n\r\n        this.state = {\r\n            Length: 20,\r\n            imageURLs: fetchedImageURLs,\r\n            loading: true,\r\n            fullImage: false,\r\n            imageValue: null\r\n        }\r\n\r\n        \r\n    }\r\n        \r\n        \r\n    }\r\n\r\n    componentDidUpdate () {\r\n\r\n    }\r\n    \r\n\r\n    render () {\r\n        const url200 = '/200x200?text=';\r\n        // const fetchedImageURLs = [];\r\n\r\n        \r\n        // const firstRendering = () => {\r\n        //     if(this.state.imageURLs.length === 0) {\r\n        //     for (let IMAGE_NUMBER = 1; IMAGE_NUMBER <= (20) && IMAGE_NUMBER<=300; ++IMAGE_NUMBER) {\r\n\r\n        //         fetchedImageURLs.push(`${IMAGE_NUMBER}`)\r\n                \r\n        //     }\r\n        //     this.setState({imageURLs: fetchedImageURLs})\r\n        //     // console.log('ran once', fetchedImageURLs);\r\n        // }\r\n\r\n        // }\r\n        \r\n         \r\n\r\n        const thumbnailClicked = (Number) => {\r\n            this.setState({fullImage: true, imageValue: Number})\r\n\r\n        }\r\n\r\n        const closeFullView = () => {\r\n            this.setState({fullImage: false})\r\n        }\r\n\r\n        const Previous = (currentImage) => {\r\n            // console.log('Previous called')\r\n            if(this.state.imageValue > (1)) {\r\n            this.setState({imageValue: +currentImage - 1})\r\n            }\r\n            \r\n\r\n        }\r\n\r\n        const Next = (currentImage) => {\r\n            // console.log('Next called')\r\n            if(this.state.imageValue < (300)) {\r\n            this.setState({imageValue: +currentImage + 1})\r\n                }\r\n\r\n        }\r\n\r\n        ArrowKeysReact.config({\r\n            left: () =>{\r\n               return Previous(this.state.imageValue)\r\n                \r\n            } ,\r\n            right: () =>{\r\n                \r\n                return Next(this.state.imageValue)\r\n             \r\n            } \r\n        });\r\n\r\n        const fetchMoreData = () => {\r\n            // console.log('fetchMoreData called', fetchedImageURLs, '\\n')\r\n            let ll = this.state.imageURLs\r\n            for (let IMAGE_NUMBER = this.state.Length + 1; IMAGE_NUMBER <= (this.state.Length + 10); ++IMAGE_NUMBER) {\r\n                ll.push(`${IMAGE_NUMBER}`)\r\n                // console.log('FIRSTFETCHING', ll)\r\n            }\r\n            this.setState({Length: ll.length, imageURLs: ll })\r\n            // console.log(ll, this.state.Length);\r\n        }\r\n\r\n        \r\n        return (\r\n            <div>\r\n                {/* {\r\n                    // this.state.imageURLs.length === 0 ?\r\n                     () => firstRendering() \r\n                    //  : null\r\n\r\n                } */}\r\n               { \r\n                this.state.fullImage ? (\r\n                    <div {...ArrowKeysReact.events} >\r\n                        <button className='Close' onClick={() => closeFullView() } >Close</button>\r\n                        <button autoFocus className='Previous' onClick={() =>Previous(this.state.imageValue)} >Previous</button>\r\n                        <FullView src={this.state.imageValue} />\r\n                        <button  className='Next' onClick={() =>Next(this.state.imageValue)} >Next</button>\r\n\r\n                    </div> ):\r\n                        <InfiniteScroll \r\n                        dataLength={this.state.Length}\r\n                        next={() => {\r\n                            // console.log('next called\\n')\r\n                            fetchMoreData()\r\n                        }}//this.state.Length)}\r\n                        hasMore={this.state.Length <= 290}\r\n                        loader={<h4>Loading...</h4>}\r\n                        endMessage={\r\n                            <p style={{ textAlign: 'center' }}>\r\n                              Congratulations! you have seen all the photos\r\n                            </p>\r\n                          } >\r\n\r\n                            {this.state.imageURLs.map(u => {\r\n                            // return <img \r\n                            // className='Image'\r\n                            // src={url200 + u}  \r\n                            // key={u} \r\n                            // alt={u}\r\n                            // onClick={() => thumbnailClicked(u) } />\r\n\r\n                            return <Thumbnail \r\n                            \r\n                            src={url200 + u}  \r\n                            key={u} \r\n                            alt={u}\r\n                            clicked={() => thumbnailClicked(u) } />\r\n\r\n                            })\r\n                        }\r\n\r\n                        </InfiniteScroll>\r\n\r\n\r\n\r\n                     \r\n                }\r\n            </div>\r\n\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default ThumbnailView;","// import logo from './logo.svg';\nimport './App.css';\nimport ThumbnailView from './Containers/ThumbnailView/ThumbnailView';\n\nfunction App() {\n  return (\n    <div >\n      \n      <ThumbnailView />\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}